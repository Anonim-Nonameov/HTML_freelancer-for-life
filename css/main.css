/* Общие стили страницы */
body {
	margin: 0px 5px;
	padding: 0px 5px;
}

* {
	box-sizing: border-box;
}

/*
Синтаксис в CSS доволно простой, мы обращаемся к конкретному тегу либо
к группе тегов в нашем index.html файле и задаем им нужные стили, "разукрашиваем торт".

Синтаксис таков:
тег {
	параметр: значение;
}

Мы выбираем тег, прописываем к нему параметр, а к параметру значение.
И это всё применится ко всем тегам, который мы прописали.

Пример -

div {
	параметр: значение;
	параметр: значение;
	параметр: значение;
}

Этот код можно прочитать так:
"Выбери все теги div в HTML файле и добавь к ним вот такие вот параметры".

Важно знать!
После параметра ОБЯЗАТЕЛЬНО идет двоеточие, а после значения точка-запятая, ею мы разделяем параметры.
Причем параметров может быть сколь угодно, 2, 3, 5 или 10.

*/

/*
span {
	font-size: 20px;
	 Изменит размер шрифта внутри тега span 

	color: red;
	 Изменит цвет текста внутри тега span 
}
*/

/* 
Этот код изменит размер шрифта на 20 пикселей и цвет
текста на красный во всех тегах span на HTML странице..
По крайней мере должен.

Наш index.html файл не видит эти стили, потому что main.css не подключен к нему!
В index.html тебе все подробно расскажут, не переживай.
А теперь быстро перейди в файл index.html и загляни в тег head!
Как всё закончишь, приди сюда обратно.
*/

/*
Так.. раз ты сюда вернулся, значит всё закончил, так?
Ага, ну вот и славно, теперь когда ты знаешь всё о классах - мы продолжим урок.
Для начала закомментируем старые стили.

Чтобы мы обратились к селектору по классу - пропишем то же самое, только вместо слова "span" -
напишем название класса:
*/

/*
.bigred {
	color: red;
	font-size: 20px;
}
*/

/*
Всё, теперь эти стили применятся только к тем тегам, у которых есть класс bigred.

И кстати, очень удобное свойство CSS - перезаписывание стилей. Если мы, например,
после font-size: 20px; напишем ещё одно такое свойство, но только с 30 px - 
оно перезапишет то, что было до него. Т.е - размер шрифта изменится с 20 на 30 px.
Ну а если мы наоборот, поставим это свойство выше - размер будет не 30 а 20 пикселей.

То же самое можно сделать с дублированием класса - замесь переписывания стиля мы просто
возьмем и перезапишем весь наш вызов к классу -
*/

/*
.bigred {
	font-size: 22x;
}
*/

/*
Теперь наши теги с классом bigred - размером в 22 пикселей.
В CSS есть такая мощная штука.. приоритетность!
Если мы хотим, чтобы какие-то стили применялись только к тегу span - записываем вот так:
*/

/* span.bigred {
	font-size: 25px;
	color: green;
} */

/*
И эта запись намного приоритетнее записи с простым тегом или классом.
Т.е - если мы поставим эту запись в самое-самое начало, она всё равно будет работать.

А теперь закомментируем всё не нужное и спустим всё вниз, чтоб было чище и понятнее.
Тоже самое сделаем и с index.html страницей.
Примечание - я в коде буду оставлять такие записи - U. Они означают, что я обновлял код и
удалил/закомментировал некоторые стили.
*/

/*
U
*/

/*
.bigred {
	color: red;
	font-size: 20px;
}
*/

/*
Допустим, мы хотим чтобы теги span в теге p были зелеными.
Но как это сделать?
Легко:
*/

/*
U
*/

/*
.bigred span {
	color: green;
}
*/

/*
Что означает наша запись?
Она означает, что стили применятся только к тегу span в теге с классом bigred.
*/

/*
Если ты смотрел на наш index.html файл, ты наверняка знаешь что я удалил класс bigred,
добавил теги div и к главному класс block.

В HTML & CSS есть такая штука как дочерние элементы и потомки. Дочерним является тот элемент,
который находится непосредственно внутри родительского.

К примеру, у нас есть тег div и внутри него тег p - тег div родительский, тег p - дочерний.
А потомки, это те элементы, которые находятся внутри тега p, который внутри тега div.
К примеру span. У нас есть потомок span, внутри дочернего p, внутри родителя div:

div родитель {
	p дочка {
		span - потомок
	}
}

*/

/*
U
*/

/* .block > p {
	color: blue;
} */

/*
Данный селектор применится ко всем дочерним тегам p, которые находятся внутри первого, родительского
тега div.

Если вы, читатель, заметили - у нас в html файле вот такая структура (если я, конечно же, не
удалил/поменял её:

div.block {
	p {
		span {
			...(text)
		}

		span {
			...(text)
		}
	}

	p {
		span {
			...(text)
		}
	}

	div {
		p {
			...(text)
		}
	}
}

Внутри тега div с классом block есть два параграфа, внутри которых текст и всякие span, и ещё один div.
Так вот, селектор который я указал выше - применится лишь к тегам p внутри ПЕРВОГО (
род. div'а), а те p которые внутри другого, дочернего div'а - не будут тронуты.

*/

/*
И ещё в CSS есть такая очень удобная штука как НАСЛЕДОВАНИЕ ПАРАМЕТРОВ.
Допустим, у нас есть код:
*/

/*
U
*/

/* .block {
	color: blue;
	font-size: 15px;
	border: 1px solid #000;
} */

/*
Он применится ко всем элементам в теге div, все дочерние элементы и потомки унаследуют стили от предка.
Это как у людей - сын перенял цвет волос у отца, цвет глаз матери и прочие схожести.

НО! - свойство border (рамка) применится только к родительскому тегу div, а не ко всем элементам внутри.
Из этого следует, что не все свойства могут наследоваться.
*/

/*
Тааак.. я обновил наш index.html файл, добавил параграфы, список, заголовок.
Вообще, в HTML & CSS есть уже заданные стили - отступы сбоку, снизу, кружки всякие у элементов списка..

Для того чтоб решить все эти вопросы кроссбраузерности мы обнулим наши стили.
Я создам специальный css файл - обнуляшку, которая удалит все эти стили.
Почему я просто не добавлю его сюда? потому что код огромный, и всё это сюда запихнуть... оо.. ну уж нет.
*/

/*
Повторим наши селекторы:

Селектор по классу:
.class {
	...
}

Селектор по типу, типовой селектор (выберет все указанные элементы на странице):
div {
	...
}

Селектор типа и класса (наиболее приоритетный чем селекторы выше):
div.block {
	...
}


А теперь повторим параметры, свойства и значения:

Свойство.
Свойство - это то, что мы пишем до двоеточия.

Значение.
Значение - это то, что мы пишем после двоеточия.

Параметр.
Параметр - это вся строка (включая свойство со значением).

Пример:
font-size: 20px;

Свойство - font-size
Значение - 20px;
Параметр - font-size: 20px;

Можно указывать сразу несколько селекторов, через запятую:
.block, .block2 {
	...
}
*/

.arial {
	font-family: Arial;
	/* Свойство font-family задает шрифт для текста. */
}

.fontsize30 {
	font-size: 30px;
	/* Свойство font-size задает размер шрифта. */
}

.italic {
	font-style: italic;
	/* Свойство font-style задает начертание шрифта, нормальный (normal) и курсивный (italic). */
}

.font700 {
	font-weight: 700;
	/* Свойство font-weight задает размер, вес шрифта. */
}

.colorred {
	color: red;
	/* // */
	color: rgb(255, 0, 0);
	/* Свойство color задает цвет текста.
	Это свойство принимает цвета в rgb и в шестнадцатеричном коде. */
}

.textright {
	text-align: left;
	/* // */
	text-align: right;
	/* // */
	text-align: justify;
	/* // */
	text-align: center;
	/* Свойство text-align выравнивает текст по левому/правому краю, и по центру.
	Значение justify растягивает весь текст на всю ширину экрана, добавляя пробелы между словами */
}

.decoration {
	text-decoration: underline;
	/* // */
	text-decoration: overline;
	/* // */
	text-decoration: line-through;
	/* // */
	text-decoration: none;
	/* Свойство text-decoration добавляет к тексту декорации, в виде подчеркивания, перечеркивания,
	надчеркивания (если такое слово вообще есть..).
	Значение underline - подчеркивает, overline - надчеркивает, line -through - перечеркивает, none - убирает все дек. */
}

/* Позже допишу ещё ... */