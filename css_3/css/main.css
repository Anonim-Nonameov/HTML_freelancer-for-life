/* Урок №3 - CSS свойства блоков. padding, margin, display. */	

/*
!!ВАЖНОЯ ИНФАРМАЦЫЯ!!!

Урок идет целых полчаса, поэтому я буду писать всё это очень долго.
Конспекта много, и писать надо не меньше.
Займет все это примерно 2 дня, может больше. Но я постараюсь уложиться в 2 дня.
*/

/* 
У блоков (блочных элементов) в CSS есть специальные свойства, padding и margin.

padding - это внутренний отступ у блочного тега. Т.е, когда мы задаем padding у n-ного элемента,
то все внутренние элементы тоже сдвигаются!

Синтаксис прост:

padding: 5px 10px 15px 20px;

Отступ в пять пикселей будет сверху, десять пикселей справа, снизу пятнадцать, двадцать слева.
Иногда можно запутаться во всём этом, и проще всё это объяснить на примере наручных часов:

Первое значение у padding - отступ сверху. На часах сверху всегда 12, это 1-ое значение на часах.
А это значит, что первое значение у padding отвечает за отступ сверху. Это надо запомнить!
Далее второе значение, отступ справа. На часах справа всегда цифра 3 - значит второе значение
padding отвечает за отступ справа. Запоминаем!
Далее третье значение, отступ снизу. На часах снизу всегда цифра 6 - значит третье значение
padding отвечает за отступ снизу. Запомнили!
И последнее, четвертое значение - отступ слева. На часах слева всегда цифра 9 - значит четвертое
значение padding отвечает за отступ слева. Также запомнили!

Здесь главное понять как это работает, вот и всё.
Я сам частенько забываю, какое значение за какое направление отвечает - пример с часами помогает!)
*/

.example-block {
	padding: 10px 20px 30px 5px;
	/* Жека не рассказывал про свойство border, добавил для наглдяности. Вот и я добавил. */
	border: 1px solid #000;
}

/*
Итак: 10 пикселей сверху, 20 справа, 30 снизу, 5 слева.
Убедиться в том, что всё работает - можно закомментировав padding и посмотрев на браузер.
Когда мы зайдем в браузер, то увидим, что граница "прилипает" к тексту, а благодаря padding - держится
"в сторонке" от нашего текста. Боится :) 

Но что если мы укажем не 4 знаения, а 3? например, вот так:
padding: 10px 20px 30px;

Тогда произойдет вот что: 10 пикселей сверху, 20 пикселей и справа и слева, 30 пикселей снизу.
Всё дело в том, что мы убрали значение "5px", а это отвечает за отступ в 5 пикселей слева,
поэтому оно было заменено на 20px (т.к 20px это отступ справа). "Справа" поделился своими пикселями с "слева" :D
*/

.example-block {
	padding: 10px 20px 30px;
}

/*
З.Ы - вы не увидите изменений, а увидите последнее значение у .example-block - работает переопределение.
Если вам, читатель, надо узнать как работает паддинг - переопределите .example-block и поиграйтесь
со значениями padding, удаляя и добавляя значения также как и я.
*/

/*
Хорошо, а что если мы уберем и третье значение? например, вот так:
padding: 10px 20px;
Тогда будет так: 10 пикселей снизу и сверху, 20 пикселей справа и слева.
Мы убрали значение "30px", а это отступ снизу. Поэтому, было взято значение у 10px (а это отступ сверху).

*/

.example-block {
	padding: 10px 20px;
}

/*
А что если оставить только одно значение? например, вот так:
padding: 10px;
Тогда во как будет? 10 пикселей снизу, сверху, справа и слева. Всё дело в том, что больше значения "20xpx"
больше нету, соответственно нету отступов справа и слева. Поэтому было взято у 10px, т.к это единственное
доступное значение в коде.
*/

.example-block {
	padding: 10px;
}

/*
И в конце концов - значения свойства padding не может быть отрицательным, и еще: паддинги работают
исключительно для блоков (то есть для блочных элементов).

Но всё давайте посмотрим на то, что же будет с нашим строчным элементом с паддингом:
*/

.example-string {
	padding: 20px;
	/* border: 1px solid #000000 */
}

/*
Если зайти в браузер и посмотреть на то, что же произошло - можно заметить, что сдвинулась лишь первая
строчка в теге span. Почему? а я не знаю как объяснить, проще посмотреть в консоли разработчика (включить
её можно при помощи хоткея: CTRL + Shift + I).
А что касается бордера - то он также не применим к строчным тегам, и если применить его вкупе с паддингами - будет
какой-то кошмар, всё станет похожим на свастику (я серьезно). А без паддингов, бордер просто будет сильно прижат к
нашему тексту в span.

И я забыл упомянуть, что значения паддингов могут задаваться не только в пикселях, их можно задавать в разных
единицах измерения. Например - в процентах: 
*/

.example-block {
	padding: 10%;
}

/*
В таком случае, значения паддингов будут равны десяти процентам от ширины родителя, то бишь от ширины окна браузера.
Всё дело в том, что паддинг - внутренний отступ, а значит - будет внутри дива. Но из-за внутренних отступов,
размеры блока будет довольно большими, и если мы будем уменьшать окно браузера - будет уменьшаться и сам блок,
но паддинги всё равно будут занимать 10 процентов от ширины родителя.

Короче - 10 процентов от ширины дива, а размер дива зависит от ширины окна браузера.
Но всё же проще просто открыть браузер и начать менять ширину окна, так будет куда понятнее :)

Ну а теперь о другом, противоположном свойстве - margin, ВНЕШНИЙ отступ у блочных тегов.
Я не думаю что его стоит как-то объяснять, так как его значения те же самые, что и у паддингов.
Однако, если мы сделаем ТАК:

*/

.example-block {
	/* Чтобы вернуть паддинги на свои места */
	padding: inherit;
	margin: 10px;
}

/*
То мы увидим, что наш блок "отступил" от краев окна. Испугался :)
Это то и есть внешний отступ - внутри он никаких отступов не дает, только снаружи.

Существенное отличие паддинга и маргина в том, что у маргинов допустимы ОТРИЦАТЕЛЬНЫЕ значения.
Да-да, ОТРИЦАТЕЛЬНЫЕ. Посмотрим на пример:
*/

.example-block {
	/* Сверху и снизу внешний отступ по 10 пикселей, а справа и слева МИНУС 10 пикселей */
	margin: 10px -10px;
}

/*
Если посмотреть в браузер, то можно заметить, что наш блок.. "съехал" влево. Всё дело в том, что отрицательные
значения инвертны положительным (как бы логично это не звучало). Если мы задали 10 пикселей справа и слева - то
он отступит от краев окна на 10 пикселей, а если мы задали -10 пикселей - наоборот, будет "прижат".

А тэпэрь посмотрим его работу со строчными тегами:
*/

.example-block {
	/* Не знаю зачем, но Жека убрал все маргины у блочного тега.. но я сделаю также */
	margin: inherit;
}

.example-string {
	/* Чтобы вернуть паддинги на свои места */
	padding: inherit;
	margin: 10px;
}

/*
Если зайти в браузер, не трудно заметить, что наш текст немного сдвинулся вправо.
Всё очень просто: маргины, как и паддинги - не работают со строчными тегами.
Это всё равно что пилить дерево - ножиком для масла.

Ну а тем временем мы движемся ко следующему свойству: width.
Свойство width регулирует ширину какого-то элемента. Значения также могут быть как в пикселях, так и %.
*/

.example-block {
	width: 500px;
}

/*
Если зайти в браузер, то можно заметить, что размер нашего блока стал равен 500 пикселей.
Вообще, управлять этим свойством очень просто - написал значение, и всё.
А что касается строчных тегов - тут та же самая ситуация, что и с margin & padding.
*/

.example-string {
	width: 500px;
}

/*
ЕСЛИ МЫ ПРЯМО СЕЙЧАС ЗАЙДЕМ В БРАУЗЕР И ПЕРЕЗАГРУЗИМ СТРАНИЦУ ТО...
ничего не увидим, всё, разошлись.
На самом деле - width абсолютно никак не влияет на строчные теги. Вообще.

Но! - попробуем применить свойство width к тегу img:
*/

.example-image {
	width: 100px;
}

/*
Если мы сейчас зайдем в браузер, то увидим что наша картинка сильно уменьшилась - до 100 пикселей.

О чем нам это говорит?
А говорит это нам о том, что всё же к некоторым строчным элементам (вроде img) width всё таки применяется. 

Говорим-говорим, а о свойстве max-width - ни слова!
Следующее свойство - max-width, максимальная ширина элемента.
В принципе, объяснять о чем это свойство - глупо. Ясен пень что оно устанавливает максимальную ширину у элемента.
Т.е это такой ограничитель ширины, да и только :)
*/

.example-block {
	width: auto; /* обнуляшки!! */
	max-width: 500px;
}

/*
Если мы зайдем в браузер, то ничего нового и интересного не увидим.
Всё дело в том, что ширина нашего блока - огромна (у меня она 1216px, да-да!), и мы его просто ограничили по
ширине - тот же результат можно увидеть, если задать свойству width значение 500px, а это мы уже делали.

Ну всо - остальное допишу завтра)
*/