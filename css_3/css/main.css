/* Урок №3 - CSS свойства блоков. padding, margin, display. */	

/*
!!ВАЖНОЯ ИНФАРМАЦЫЯ!!!

Урок идет целых полчаса, поэтому я буду писать всё это очень долго.
Конспекта много, и писать надо не меньше.
Займет все это примерно 2 дня, может больше. Но я постараюсь уложиться в 2 дня.
*/

/* 
У блоков (блочных элементов) в CSS есть специальные свойства, padding и margin.

padding - это внутренний отступ у блочного тега. Т.е, когда мы задаем padding у n-ного элемента,
то все внутренние элементы тоже сдвигаются!

Синтаксис прост:

padding: 5px 10px 15px 20px;

Отступ в пять пикселей будет сверху, десять пикселей справа, снизу пятнадцать, двадцать слева.
Иногда можно запутаться во всём этом, и проще всё это объяснить на примере наручных часов:

Первое значение у padding - отступ сверху. На часах сверху всегда 12, это 1-ое значение на часах.
А это значит, что первое значение у padding отвечает за отступ сверху. Это надо запомнить!
Далее второе значение, отступ справа. На часах справа всегда цифра 3 - значит второе значение
padding отвечает за отступ справа. Запоминаем!
Далее третье значение, отступ снизу. На часах снизу всегда цифра 6 - значит третье значение
padding отвечает за отступ снизу. Запомнили!
И последнее, четвертое значение - отступ слева. На часах слева всегда цифра 9 - значит четвертое
значение padding отвечает за отступ слева. Также запомнили!

Здесь главное понять как это работает, вот и всё.
Я сам частенько забываю, какое значение за какое направление отвечает - пример с часами помогает!)
*/

.example-block {
	padding: 10px 20px 30px 5px;
	/* Жека не рассказывал про свойство border, добавил для наглдяности. Вот и я добавил. */
	border: 1px solid #000;
}

/*
Итак: 10 пикселей сверху, 20 справа, 30 снизу, 5 слева.
Убедиться в том, что всё работает - можно закомментировав padding и посмотрев на браузер.
Когда мы зайдем в браузер, то увидим, что граница "прилипает" к тексту, а благодаря padding - держится
"в сторонке" от нашего текста. Боится :) 

Но что если мы укажем не 4 знаения, а 3? например, вот так:
padding: 10px 20px 30px;

Тогда произойдет вот что: 10 пикселей сверху, 20 пикселей и справа и слева, 30 пикселей снизу.
Всё дело в том, что мы убрали значение "5px", а это отвечает за отступ в 5 пикселей слева,
поэтому оно было заменено на 20px (т.к 20px это отступ справа). "Справа" поделился своими пикселями с "слева" :D
*/

.example-block {
	padding: 10px 20px 30px;
}

/*
З.Ы - вы не увидите изменений, а увидите последнее значение у .example-block - работает переопределение.
Если вам, читатель, надо узнать как работает паддинг - переопределите .example-block и поиграйтесь
со значениями padding, удаляя значения также как и я.
*/

/*
Хорошо, а что если мы уберем и третье значение? например, вот так:
padding: 10px 20px;
Тогда будет так: 10 пикселей снизу и сверху, 20 пикселей справа и слева.
Мы убрали значение "30px", а это отступ снизу. Поэтому, было взято значение у 10px (а это отступ сверху).

*/

.example-block {
	padding: 10px 20px;
}

/*
А что если оставить только одно значение? например, вот так:
padding: 10px;
Тогда во как будет? 10 пикселей снизу, сверху, справа и слева. Всё дело в том, что больше значения "20xpx"
больше нету, соответственно нету отступов справа и слева. Поэтому было взято у 10px, т.к это единственное
доступное значение в коде.
*/

.example-block {
	padding: 10px;
}

/* Остальное - допишу завтра. Завтра буду писать в два раза больше, будет x2 кода :) */