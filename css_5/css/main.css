/* Урок №4 - CSS свойство background */

/*
Итак, в этом уроке мы будем говорить о всего лишь одном свойстве - зато о каком!
CSS свойство background управляет "задним фоном" у блока, а также может его задать и не только!
С bakcground'ом мы можем определить задать фон. изображение, цвет фона, его начальную позицию, его повторение,
задать метод скролла (будет ли он прокручиваться на сайте вместе с другим (или его же) содержимым), и настроить его масштаб.
Кроме того - фоном можно назначить даже градиентную заливку!
В общем - background очень крутая и полезная штука, а работать с ним мы (я, точнее) начинаем (начинаю :D) уже сегодня!

P.S - урок большой, целых 30 минут идет :) 
*/

/*
Для начала, сделаем наш блок "видимым" и отделим содержимое страницы от границ окна:
*/

body {
	padding: 30px;
}

.block {
	height: 300px;
	border-radius: 15px; /* красоту никто не отменял! */
	box-shadow: 0 0 10px #000;
}

/*
Ну вот, теперь наш блок (как и вся страница) готов для работы!
Теперь же я хочу покрасить блок, а именно - задать ему цвет фона.

Цвет фона задается непосредственно свойством background, с ним мы можем задавать сразу несколько значений фона.
Или же, для этого мы можем использовать одно из дочерних свойств background - background-color. Это свойство
говорит само за себя - оно задает цвет фона элементу и в основном используют именно его, т.к он предназначен для этого.
В качестве значений принимает:

1. - Шестнадцатеричный. код (начинается с #), пример - #6a6a6a
2. - Rgb, пример - rgb(106, 106, 106)
3. - Rgb с альфа-каналом (rgba), что позволит сделать фон блока полу-прозрачным, пример - rgba(106, 106, 106, 0.5)

По умолчанию наш блок итак прозрачен, на все 100% - мы отчётливо видим то, что находится как внутри - так и снаружи блока,
и задается такое значение словом "transparent", что в переводе с англ. значит "прозрачный".

А теперь зададим блоку обычный цвет фона, при помощи шест. кода:
*/

.block {
	/* Используя свойство background */
	background: #18b5a4;
	/* Используя его дочернее свойство, background-color */
	background-color: #18b5a4;
}

/*
Красиво получилось, но мы можем задать цвет также и в rgba! (именно с а-к, он интересней и красивее выглядит)
Как нам перевести тот голубой цвет из HEX (HEX - цвета в шест. коде) в RGBA?
Для этого можно использовать простейший сайт, который нам порекомендовал Жека: hex2rgba.devoth.com
Переводить цвета я не буду, вместо этого просто возьмем уже зарекомендованный цвет:
*/

.block {
	/* Используя свойство background */
	background: rgba(129, 45, 211, 1);
	/* Используя его дочернее свойство, background-color */
	background-color: rgba(129, 45 ,211, 1);
}

/*
A.S - Вы, читатель, наверняка заметили,	что я использую сразу два свйства background, "перекрывая" последним первое?
Это для того чтобы показать как тому кто это читает, так и себе, что оба этих свойства работают одинаково и различия
лишь в том, что при помощи background можно задать сразу несколько значений.
Ну а дальше я буду использовать background, так как оно (опять же) позволяет задать сразу несколько значений.

Отлично, очень красиво получается. При желании можно поэкспериментировать с альфа-каналом, получится тоже
очень неплохо :)
Кстати, rgba и rgb - одинаковы. Если у слова "rgba" убрать "a", убрать цифру "1" в конце rgba кода - получится
тот же самый цвет, но без управления альфа-каналом и возможности сделать фон полу-прозрачным.

А теперь мы перейдем к более интересному - добавлению фона в виде КАРТИНКИ! т.е, мы добавим фоновое изображение.
Но как это сделать? - на самом деле всё очень просто.
Для того, чтобы вставить фоновое изображение, можно использовать либо background, либо свойство предназначенное
как раз для этого - background-image. В качестве значения мы передаем слово url, после открываем круглые скобки,
а вот внутри круглых скобок мы указываем путь до картинки.
Попробуем задать фон. изображение нашему блоку (также через background, общую запись):

P.S - Перед уроком я скачал уже готовый архив Жеки, но оттуда я достал только картинки - это то мне и
нужно было! Так как в качестве фона мы будем использовать самые разные картинки, мне пришлось качать архив.
Всё дело в том, что он не говорит про размер картинки, и поэтому я не знаю какие картинки нужны.
*/

.block {
	background-color: transparent; /* обнуляшки!! */
	background: url(../img/avatar.jpg);
}

/*
Зашли в браузер и увидели, что подключенная картинка (она 100 на 100 пикселей, оказывается :D) повторяется
бесконечное количество раз, что выглядит не очень красиво.
Я подключим другую картинку, вот эту:
*/

.block {
	background: url(../img/bg_repeat.jpg);
}

/*
Опять заходим в браузер и смотрим на красоту!
Но что в этой картинке такого особенного? - эта картинка вырезана таким образом, что каждый её край может быть 
продолжен её же началом.. короче, картинка вырезана специальным образом.
А вообще, это очень круто - имея определенный отрезок из общего фона, мы можем заполнить наш блок делая его красивым!
Но тут возникает резонный вопрос - а почему бы не использовать одну большую картинку, и дело с концом?
Ответ: картинка будет большой и соответственно будет весить довольно много. Даже если она будет весить несколько
килобайт, это может замедлить загрузку нашего сайта! в верстке очень важна скорость загрузки сайта, поэтому
верстальщики часто используют вот такие вот картинки, которые вырезаны также специальным образом.
Специальные картинки вырезанные специальным образом специально для сайта! xD

А теперь мы поговорим об одном (или не об одном, я так и не понял) значении свойства background-image, которое
с картинками ничего общего не имеет (парадокс! :D).
Свойство background-image может подключать линейный и радиальный градиенты, которые сейчас всё чаще и чаще
используются в дизайне. Собственно - это просто заливка градиентом, от одного цвета до другого.
Ну, меньше буду балаболить и просто оставлю тут код:
*/

.block {
	background: none; /* обнуляшки!! */

	/* Old browsers */
	background: rgb(236, 232 , 157); /* похоже, что раньше вообще никаких градиентов не было */

	/* FF3. 6-15 */
	background: -moz-linear-gradient(top, rgba(236, 232, 157, 1) 0%, rgba(94, 83, 115, 1) 50%, rgba(24, 181, 164, 1) 100%);

	/* Chrome 1-15, Safari 5.1-6 */
	background: -webkit-linear-gradient(top, rgba(236, 232, 157, 1) 0%, rgba(94, 83, 115, 1) 50%, rgba(24, 181, 164, 1) 100%);

	/* W3C, IE10+, FF16+, Chrome 26+, Opera 12+, Safari 7+ */
	background: linear-gradient(top, rgba(236, 232, 157, 1) 0%, rgba(94, 83, 115, 1) 50%, rgba(24, 181, 164, 1) 100%);
}

/*
A.S: Код переписывал вручную :D

Итак.. код ОГРОМНЫЙ. Здесь сложно всё запомнить с 1 раза, так как здесь сразу несколько записей, ибо градиент
поддерживают не все версии браузеров, или поддерживают но не полностью. Зачастую верстальщики используют такие
"хаки" для браузеров, чтобы везде работало как надо. Кстати о поддержке - вот у меня не работает ни одна из записей,
кроме второй (для Chrome 1-15). Странно, ведь я только сегодня (8 окт) обновил.
И да - в свойствах линейного градиента есть значения-направления, т.е верх, вниз, слева-направо и т.д.
Также мы указываем цвет начала, процент занимаемого пространства (откуда стартанет этот цвет), далее можем указать
еще один цвет, еще один цвет и еше один цвет, и в конце окончательный цвет. Звучит это сложно, и это действительно так,
но тут есть выход! Существует огромное кол-во сайтов для создания градиента. Например: colorzilla.com/gradient-editor.
С этим сайтом можно очень легко создать градиент, мало того - здесь есть уже готовые градиенты!
Короче - сайт хороший, рекомендую.
Ну а мы рассмотрим след. свойство, возвращаясь к background-image - это background-repeat, которое отвечает за
повторение фон. изображения. Значений у него несколько:
--------
1) repeat (знач. по умолчанию) - при этом значении, картинка будет повторяться бесокнечное кол-во раз до тех пор,
пока не заполнит собой весь фон.

2) no-repeat - при этом значении, картинка не будет повторяться вообще, т.е - картинка только появится и всё.

3) repeat-x - при этом значении, картинка будет повторяться только по горизонтали.

3) repeat-y - при этом значении, картинка будет повторяться только по вертикали.

4) round - при этом значении, фон повторяется так, чтобы в область элемента поместилось целое числа изображений.
В случае если это не удается сделать, фон автоматом масштабируется чтобы поместиться.

5) space - работает точно также как и round, только с маааленьким отличием - если целое число изображений не помещается
в область, то картинка не масштабируется, а между ними (копиями) добавляется пространство.
--------
А мы тем временем попрактикуемся с этим свойством, придавая ему различные значения.
Это можно сделать через свойство background-repeat, которое как раз предназначено для этого, или использовать background.
После url(...) мы просто ставим пробел и пишем значение background: url(путь) no-repeat;.
Первым значением будет no-repeat:
*/

.block {
	background: 0; /* обнуляшки!! */
	background: url(../img/bg_repeat.jpg) no-repeat;
}

/*
Итак.. зашли в браузер и увидели, что наша картинка не повторилась, а на фон была поставлена лишь одна картинка.
Отлично, а теперь мы идем ко следующему - repeat-x, а менять значения будем используя bg-repeat, дабы не прописывать
постоянно путь к картинке (надоедает, а так хотя-бы сокращение под bg-repeat есть - bgr):
*/

.block {
	background-repeat: repeat-x;
}

/*
ЗаходЕм в браузер и смотрим - картинка повторилась лишь по горизонтали, по вертикали нет.
Идем дальше - repeat-y:
*/

.block {
	background-repeat: repeat-y;
}

/*
Опять зашли в браузер и увидели - картинка повторилась лишь по вертикали. Скучно, так что давайте сразу к другому
значению свойства - round:
*/

.block {
	background-repeat: round;
}

/*
Заходим в гугл (или фф, а еще лучше яндекс :D) и смотрим: картинка.. пожирнела!
Она стала крупнее, но зато теперь занимает весь блок. Не красиво, поэтому идем ко след. свойству - space:
*/

.block {
	background-repeat: space;
}

/*
Заходим в гугл и смотрим: (no comment, не хочу это комментировать...)
Вообщем - некоторые значения свойства ужасны, даже не пытайтесь пробовать их..

Итак.. сейчас мы поговорим о ВАЖНАЙ ТЭМЕ в CSS - о позиционировании.
Зачастую нам необходимо как-то перетащить картинку (чаще фон. изображение) в то или иное место, сместить
её куда нибудь и всё в этом духе. Многие новички пробуют так делать при помощи паддингов и маргинов (я тоже
когда-то так делал - поверьте, это самый худший способ), а потом об этом жалеют. Есть способ куда проще - использоват
CSS свойство background-position! (па руски будит так: баграун пазишн)
Это свойство позволяет сместить элемент в то или иное место на странице, используя пиксели или проценты,
ну или использоавть любую другую (доступную) единицу измерения.
И сейчас мы попрактикуемся, а за одно и в 1-ую очередь я расскажу по быстрому записать свойство background со всеми
нужными для работы с фон. изображением значениями. Для этого просто пишем "bg+", нажимаем TAB и готово, а именно
нам выдаст - "background: (../../img) 0 0 no-repeat;". НО - работает не у всех, у меня например нет.
Про 0 0 мы еще поговорим, а пока просто подключим картиночку:
*/

.block {
	background: url(../img/avatar_3.jpg) no-repeat;
}

/*
Итак, как позиционировать картинку? чтобы это сделать, у bg-position есть значения "top", "center", "right" и "left",
а переводом заниматься я не стану - их имена уже говорят сами за себя. При этом эти значения можно комбинировать,
т.е - использовать как bottom так и right вместе, в этом случае картинка окажется в правом нижнем углу.
Но, мы можем записать значение в виде ЧИСЕЛ. Помните, когда я рассказал про сокращение "bg+", я привел пример
того, что нам выдаст, и там было два нуля? ну так вот - первый ноль отвечает за смещение по горизонтали, а второй ноль - за
смещение по вертикали. Для начала попрактикуемся на словесных значениях, например - center:
*/

.block {
	background-position: center;
}

/*
Заходэм в браузер, смотрим: картинка выровнялась строго по центру блока.
Одно значение заменяет сразу два других значения, отвечающих за гориз. и верт. расположение картинки.
Ну а теперь попробуем числовым значением сдвинуть картинку, так же по центру:
*/

.block {
	background-position: 50%;
}

/*
Заходим в браузер и не наблюдаем абсолютно никаких изменений, так как картинка всё также стоит по центру.
Однако стоит отметить, что задав только одно числовое значение (не важно в какой ед. измерения оно задано), картинка
будет смещаться по вертикали только на половину (т.е блок будет смещен по вертикали так, что будет находиться по
центру блока), поэтому важно сразу задавать два значения, если мы хотим как-то точно разместить нашу картинку:
*/

.block {
	background-position: 50% 50%;
}

/*
Хорошо, а теперь попробуем задать конкретное значение, пикселями. Сдвинем, например, на 100px слева и 50px сверху:
*/

.block {
	background-position: 100px 50px;
}

/*
Отлично! ну а на последок я покажу, как "совмещать" текстовые значения:
*/

.block {
	background-position: bottom right;
}

/*
Так, заходим в браузер (опять) и смотрим: картинка оказалась снизу, в правом углу.
Всё так и должно быть, ведь мы "приказали" нашей картинке расположиться снизу справа.

А тем временем мы идем ко след. свойству - bg-attachment.
Это интересное свойство, которое устанавливает, будет ли прокручиваться фон вместе со страницей.
Его значения также очень интересны:

1) scroll (по умол.) - при этом значении, фоновое изображение прокручивается вместе со всем содержимым.

2) fixed - при этом значении, фоновое изображение "стоит" на месте и не прокручивается.

3) local - универсальное значение, и если мы его установим, то фон будет фиксироваться с учетом
поведения элемента. Т.е, если элемент имеет прокрутку, то фон будет прокручиваться со всем
содержимым, но фон выходящий за рамки элемента - остаётся на своем месте (мутное какое-то свойство,
мне оно уже не нравится по описанию..).

Ну что там томить? погнали применять! только для начала добавим в HTML что нибудь такое, чтобы появился
скролл! но на самом деле я уже добавил, так что нам осталось только применить значение к свойству.
Первым у нас пойдет (прыгать с парашюта? :D) значение fixed:
*/

.block {
	background: none; /* обнуляшки!! */
	background: url('../img/bg.jpg') center no-repeat fixed;
}

/*
Заходим в браузер и смотрим: во первых, фон изменил свою позицию, т.е он стал фиксироваться
уже не относительно своего блока (кому он назначен), а относительно всей страницы! и теперь когда мы
начинаем скроллить нашу страницу, наш фон всё также стоит фиксированным.
Но для лучшей демонстрации, я возьму и задам фон не блоку а всему body:
*/

.block {
	background: none; /* обнуляшки!! */
}

body {
	background: url('../img/bg.jpg') center no-repeat fixed;
}

/*
Смотрим: ну вот, наш фон как встал и стоит (прям как гора)! прокручивай - не прокручивай, а толку ноль.

А тем временем мы идем дальше: свойство background-size.
Это свойство говорит само за себя - оно устаналивает РАЗМЕР нашего фон. изображения, а значение можно
выставлять как в px, так и в процентах (или любой другой ед. измерения), а можно еще кое-как задать (об
этом позже, чёт вроде сюрприза). Значение свойства по умолчанию - auto auto.

Испробуем его!
*/

body {
	background: none;
}

.block {
	background: url('../img/avatar_3.jpg') 0 0/100% no-repeat;
}

/*
Итак.. во первых - почему мы написали после цифр "0 0" слэш и только потом значение?
Ну.. так надо. Именно так это свойство и пишется, в свойстве background. 100% означает, что картинка будет
растянута по ширине и по высоте на 100%, потому что первое значение это всегда ширина, а если второе
не задано (т.е высота не задана) - она автоматически становится равной ширине ИЛИ подстраивается под неё.
Если зайти в браузер, то так оно и есть - картинка очень сильно растянулась.
Хорошо, но что если взять и растянуть картинку на 100% ПО ВЫСОТЕ а не по ширине? - сейчас узнаем!
P.S - я заиспользую свойство bg-size, так как и там и тутможно использовать всё те же самые значения.
*/

.block {
	background-size: auto 100%;	
}

/*
Отлично, стили сработали! как не трудно заметить, фон для блока действительно растянулся НА ВСЮ
высоту родителя, как мы и задумывали. Но почему ширина - auto? а это мы так ширину "на место возвращаем" :)
Ладно, это всё хорошо, но что еще умеет наш background-size? ну, например, мы можем растянуть картинку
не пропорционально, т.е указав конкретное значение. Скажем - 300 пикселей на 100:
*/

.block {
	background-size: 300px 100px;
}

/*
Итак... ну, что сказать? нашу картинку конкретно расплющило. Но по сути так и должно быть, так как
мы задали ей жёсткие размеры.

!!!ВАЖНОЯ ИНФАРМАЦЫЯ!!!
Кстати, я вот заметил - я чёт говорю про "жёстко заданные размеры", а сам
о них - ни слова! не хорошо, не хорошо. Жёстко заданные размеры - это те размеры, которые заданы в
пикселях/сантиметрах (в CSS и не такое есть), а не в процентах. Дело в том, что если мы зададим
ширину в процентах, скажем 30% - ширина всегда будет равна 30-ти процентам, и блок будет уменьшаться до 30%
независимо от ширины устройства, на котором просматривается документ (т.е - если зададим блоку ширину в
тридцать процентов, то он будет всегда равен им и будет стараться подстроиться под эту ширину вне зависимости
от ширины устройства/окна браузера). Если же задать ширину в пикселях (или любой другой ед. измерения) - она
всегда будет такой, какой бы ширины устройство/окно браузера не было.
!!!КОНЕЦ ВАЖНАЙ ИНФАРМЦЫ!!!

Идем дальше по значениям background-size и переходим к специальным значениям. Спец. значений всего несколько,
и первое из них - contain. При этом значении, изображения масштабируется с сохранением пропорций таким образом,
чтобы картинка целиком поместилась внутрь блока. Т.е - изображение масштабируется по меньшей стороне картинки,
либо ширине либо высоте (что их них меньше - то и масштабируется, как я понял).
Посмотрим на это значение поближе! для этого нам потребуется сменить картинку, поэтому используем background:
*/

.block {
	background: none; /* обнуляшки!! */
	background: url('../img/bg.jpg') 0 0/contain no-repeat;
}

/*
A.S: пояснение значений свойства background: url() - путь к картинке, 0 0 - позиция картинки, / - разделитель
позиции картинки, contain - размер картинки (это значение bg-size, просто оно так пишется в самом свойстве
background), no-repeat - отключение повторения фон. изображения (значение bg-position).

Заходим в браузер, смотрим - картинка расширена, но только со стороны высоты, не по ширине.
А мы идем дальше по спец. значениям bg-size - cover (чувствую, что значение будет таким же крутым как и прошлое).
Это значение масштабирует изображение с сохранением пропорций так, чтобы его ширина (или высота) равнялась
ширине (или высоте) блока. Т.е - масштабирует по большей стороне, а не по меньшей как contain.
Посмотрим на это значение поближе! для этого просто используем свойство bg-size, ведь меняем лишь 1 значение -
*/

.block {
	background-size: cover;
}

/*
Если зайти в браузер и посмотреть, то смысл этого значения пока не понятен - изображение сильно растянуто по
ширине, и всё! но если задать значение позиции по центру, и начать менять ширину окна браузера, то можно заметить,
что наша картинка будет постоянно пытаться "вписаться" в блок, постоянно масштабируясь. Доказательство:
*/

.block {
	background: none; /* обнуляшки!! */
	background: url('../img/bg.jpg') 50%/cover no-repeat;
}

/*
Ну вот, а за вами - менять ширину окна браузера, а если вы поставили не cover а contain - менять высоту окна.
В общем, "значение очень популярное, выручает верстальщика во многих ситуациях." (© Жека)
Т.е, как я понял, это значение масштабирует (расширяет) изображение по ширине, на всю ширину, а contain - по высоте,
на всю высоту. Кстати - можно добиться такого же результата (растяжка) без использования contain и cover, например:

1) Для того чтобы добиться того же результата, что и с contain, пишем у bg-size: auto 100%;
2) Для того чтобы добиться того же результата, что и с cover, пишем у bg-size: 100% auto;

P.S: работает только с картинкой "bg.jpg", так как я проверял только на ней, но если подобрать другую картинку,
зная ширину и высоту (ну надо же знать, какая сторона - меньше, а какая больше) - можно проделать то же самое. 

Итак, мы уже почти закончили урок, и перед тем как переходить к практике, у нас осталась еще одна
возможность из возможнестей background - установка нескольких изображений для блока.
С приходом CSS3, background "научилась" устанавливать несколько фоновых изображений для одного блока.
Указываются значения (изображения) у background через запятую: url(...) 0 0 no-repeat, url(...) 0 0 no-repeat; и т.д.
Ну, у нас есть уже настроеный фон (код сверху), и мы хотим поверх неё наложить еще какую нибудь (да поменьше),
и слегка увеличить высоту блока (уж больно он маленький, не красиво всё это). Реализуется всё это дело просто:
копируем значение свойства background на 427 строке, и вставлям перед (ОБЯЗАТЕЛЬНО ПЕРЕД! потому что та картинка,
которая следующая - ложится под предыдущую, т.е - последняя картинка будет в саааамом низу) нашим общим фоном (я о
bg.jpg, тот самый большой фон на котором проверялись contain и cover).
Наша картинка будет маленькой, своих размеров и на месте которое по умолчанию, а также не будет повторяться -
*/

.block {
	height: 500px;
	background: url('../img/avatar.jpg') 0 0 no-repeat, url('../img/bg.jpg') 50%/cover no-repeat;
}

/*
Ну вот, картинка оказалась поверх другой, на видном месте - в углу, с краю.
И я напоминаю, что всё это можно записать не в виде свойства background, а используя уже заранее созданные
свойства для разных нужд (bg-size для размеров, bg-position для позиции.. ну вы поняли). Код выше
без background будет выглядеть вот так:

.block {
	background-image: url('../img/avatar.jpg'), url('../img/bg.jpg');
	background-repeat: no-repeat;
	background-position: 0 0, 50%;
	background-size: auto auto, cover;
}

А теперь "расшифруем" код выше: первая строка - вставка фон. изображений, первая картинка будет выше другой,
следующая будет ниже. Вторая строка - запрет повторения фона (запись была сделана один раз, всё равно мы хотим
чтобы обе картинки не повторялись). Третья строка - установка позиции для картинок, первая будет в левом
верхнем углу (на месте по умолчанию), а последняя будет по центру. Четвертая строка - установка размеров для
картинок, первая картинка будет своих же размеров (знач. по умолчанию), вторая будет растягиваться по блоку
своей большей стороной, в нашем случае - растягиваться будет по ширине.

А сейчас мы разместим сразу ТРИ картинки на заднем фоне нашего блока! объяснять как, я думаю, не надо - я просто
оставлю код (ну а что? как вставлять несколько картинок мы уже знаем, поэтому.. вот!):
*/

.block {
	background: url('../img/avatar_3.jpg') 50%/100px no-repeat,
	url('../img/avatar.jpg') 100px 20px/200px no-repeat,
	url('../img/bg.jpg') 50%/cover no-repeat;
}

/*
А на этом всо! задание из урока в папке "Задания" :)
*/