/* Урок №4 - CSS свойство background */

/*
Итак, в этом уроке мы будем говорить о всего лишь одном свойстве - зато о каком!
CSS свойство background управляет "задним фоном" у блока, а также может его задать и не только!
С bakcground'ом мы можем определить задать фон. изображение, цвет фона, его начальную позицию, его повторение,
задать метод скролла (будет ли он прокручиваться на сайте вместе с другим (или его же) содержимым), и настроить его масштаб.
Кроме того - фоном можно назначить даже градиентную заливку!
В общем - background очень крутая и полезная штука, а работать с ним мы (я, точнее) начинаем (начинаю :D) уже сегодня!

P.S - урок большой, целых 30 минут идет :) 
*/

/*
Для начала, сделаем наш блок "видимым" и отделим содержимое страницы от границ окна:
*/

body {
	padding: 30px;
}

.block {
	height: 300px;
	border-radius: 15px; /* красоту никто не отменял! */
	box-shadow: 0 0 10px #000;
}

/*
Ну вот, теперь наш блок (как и вся страница) готов для работы!
Теперь же я хочу покрасить блок, а именно - задать ему цвет фона.

Цвет фона задается непосредственно свойством background, с ним мы можем задавать сразу несколько значений фона.
Или же, для этого мы можем использовать одно из дочерних свойств background - background-color. Это свойство
говорит само за себя - оно задает цвет фона элементу и в основном используют именно его, т.к он предназначен для этого.
В качестве значений принимает:

1. - Шестнадцатеричный. код (начинается с #), пример - #6a6a6a
2. - Rgb, пример - rgb(106, 106, 106)
3. - Rgb с альфа-каналом (rgba), что позволит сделать фон блока полу-прозрачным, пример - rgba(106, 106, 106, 0.5)

По умолчанию наш блок итак прозрачен, на все 100% - мы отчётливо видим то, что находится как внутри - так и снаружи блока,
и задается такое значение словом "transparent", что в переводе с англ. значит "прозрачный".

А теперь зададим блоку обычный цвет фона, при помощи шест. кода:
*/

.block {
	/* Используя свойство background */
	background: #18b5a4;
	/* Используя его дочернее свойство, background-color */
	background-color: #18b5a4;
}

/*
Красиво получилось, но мы можем задать цвет также и в rgba! (именно с а-к, он интересней и красивее выглядит)
Как нам перевести тот голубой цвет из HEX (HEX - цвета в шест. коде) в RGBA?
Для этого можно использовать простейший сайт, который нам порекомендовал Жека: hex2rgba.devoth.com
Переводить цвета я не буду, вместо этого просто возьмем уже зарекомендованный цвет:
*/

.block {
	/* Используя свойство background */
	background: rgba(129, 45, 211, 1);
	/* Используя его дочернее свойство, background-color */
	background-color: rgba(129, 45 ,211, 1);
}

/*
A.S - Вы, читатель, наверняка заметили,	что я использую сразу два свйства background, "перекрывая" последним первое?
Это для того чтобы показать как тому кто это читает, так и себе, что оба этих свойства работают одинаково и различия
лишь в том, что при помощи background можно задать сразу несколько значений.
Ну а дальше я буду использовать background, так как оно (опять же) позволяет задать сразу несколько значений.

Отлично, очень красиво получается. При желании можно поэкспериментировать с альфа-каналом, получится тоже
очень неплохо :)
Кстати, rgba и rgb - одинаковы. Если у слова "rgba" убрать "a", убрать цифру "1" в конце rgba кода - получится
тот же самый цвет, но без управления альфа-каналом и возможности сделать фон полу-прозрачным.

А теперь мы перейдем к более интересному - добавлению фона в виде КАРТИНКИ! т.е, мы добавим фоновое изображение.
Но как это сделать? - на самом деле всё очень просто.
Для того, чтобы вставить фоновое изображение, можно использовать либо background, либо свойство предназначенное
как раз для этого - background-image. В качестве значения мы передаем слово url, после открываем круглые скобки,
а вот внутри круглых скобок мы указываем путь до картинки.
Попробуем задать фон. изображение нашему блоку (также через background, общую запись):

P.S - Перед уроком я скачал уже готовый архив Жеки, но оттуда я достал только картинки - это то мне и
нужно было! Так как в качестве фона мы будем использовать самые разные картинки, мне пришлось качать архив.
Всё дело в том, что он не говорит про размер картинки, и поэтому я не знаю какие картинки нужны.
*/

.block {
	background-color: transparent; /* обнуляшки!! */
	background: url(../img/avatar.jpg);
}

/*
Зашли в браузер и увидели, что подключенная картинка (она 100 на 100 пикселей, оказывается :D) повторяется
бесконечное количество раз, что выглядит не очень красиво.
Я подключим другую картинку, вот эту:
*/

.block {
	background: url(../img/bg_repeat.jpg);
}

/*
Опять заходим в браузер и смотрим на красоту!
Но что в этой картинке такого особенного? - эта картинка вырезана таким образом, что каждый её край может быть 
продолжен её же началом.. короче, картинка вырезана специальным образом.
А вообще, это очень круто - имея определенный отрезок из общего фона, мы можем заполнить наш блок делая его красивым!
Но тут возникает резонный вопрос - а почему бы не использовать одну большую картинку, и дело с концом?
Ответ: картинка будет большой и соответственно будет весить довольно много. Даже если она будет весить несколько
килобайт, это может замедлить загрузку нашего сайта! в верстке очень важна скорость загрузки сайта, поэтому
верстальщики часто используют вот такие вот картинки, которые вырезаны также специальным образом.
Специальные картинки вырезанные специальным образом специально для сайта! xD

А теперь мы поговорим об одном (или не об одном, я так и не понял) значении свойства background-image, которое
с картинками ничего общего не имеет (парадокс! :D).
Свойство background-image может подключать линейный и радиальный градиенты, которые сейчас всё чаще и чаще
используются в дизайне. Собственно - это просто заливка градиентом, от одного цвета до другого.
Ну, меньше буду балаболить и просто оставлю тут код:
*/

.block {
	background: none; /* обнуляшки!! */

	/* Old browsers */
	background: rgb(236, 232 , 157); /* похоже, что раньше вообще никаких градиентов не было */

	/* FF3. 6-15 */
	background: -moz-linear-gradient(top, rgba(236, 232, 157, 1) 0%, rgba(94, 83, 115, 1) 50%, rgba(24, 181, 164, 1) 100%);

	/* Chrome 1-15, Safari 5.1-6 */
	background: -webkit-linear-gradient(top, rgba(236, 232, 157, 1) 0%, rgba(94, 83, 115, 1) 50%, rgba(24, 181, 164, 1) 100%);

	/* W3C, IE10+, FF16+, Chrome 26+, Opera 12+, Safari 7+ */
	background: linear-gradient(top, rgba(236, 232, 157, 1) 0%, rgba(94, 83, 115, 1) 50%, rgba(24, 181, 164, 1) 100%);
}

/*
A.S: Код переписывал вручную :D

Итак.. код ОГРОМНЫЙ. Здесь сложно всё запомнить с 1 раза, так как здесь сразу несколько записей, ибо градиент
поддерживают не все версии браузеров, или поддерживают но не полностью. Зачастую верстальщики используют такие
"хаки" для браузеров, чтобы везде работало как надо. Кстати о поддержке - вот у меня не работает ни одна из записей,
кроме второй (для Chrome 1-15). Странно, ведь я только сегодня (8 окт) обновил.
И да - в свойствах линейного градиента есть значения-направления, т.е верх, вниз, слева-направо и т.д.
Также мы указываем цвет начала, процент занимаемого пространства (откуда стартанет этот цвет), далее можем указать
еще один цвет, еще один цвет и еше один цвет, и в конце окончательный цвет. Звучит это сложно, и это действительно так,
но тут есть выход! Существует огромное кол-во сайтов для создания градиента. Например: colorzilla.com/gradient-editor.
С этим сайтом можно очень легко создать градиент, мало того - здесь есть уже готовые градиенты!
Короче - сайт хороший, рекомендую.

Ну а мы рассмотрим след. свойство, возвращаясь к background-image - это background-repeat, который отвечает за
повторение фон. изображения.

Рассматривать его будем завтра :)
*/