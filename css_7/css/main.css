/* Урок №4 - CSS псевдоэлементы: before и другие. */

/*
Сегодня наш разговор пойдет о псевдоэлементах! псевдоэлементы могут с помощью CSS обратиться
к содержимому, или к части содержимого объекта, а также добавить новые объекты! сейчас мы со
всем разберемся и научимся всему необходимому :) но нам для начала необходимо хоть как-то да
застилизовать наш HTML файл, а то он выглядит уж больно скучным! ну так чего медлить? приступаем!
*/

body {
	padding: 30px;
}

.text {
	font-size: 24px;
	line-height: 33px;
	margin: 0 0 30px 0;
}

.list li {
	font-size: 24px;
	margin: 0 0 20px 0;
}

/*
Синтаксис написания псевдоэлементов крайне схож с синтаксисом написания псевдоклассов, и это в общем-то
даже неудивительно - у них даже названия очень похожи, синтаксис что-ли будет отличаться? ага, щас :D
Ну на крайний случай вот вам: идет обращение к селектору класса, либо к селектору типа, затем ставится двое-
точие и только после него идет название псевдоэлемента. С приходом CSS3 стало возможно добавлять сразу двое-
точия вместо одного, что очень даже удобно, ведь таким образом мы сможем различать псевдоклассы и псевдоэле-
менты, если у нас в файле активно используются как первые (п-классы), так и вторые (п-элементы). Как-то так!

А теперь пора переходить непосредственно к псевдоэлементам! Встречайте - ::first-line
Псевдоэлемент first-line позволяет задать стили для первой строки текста. Интересно, не так ли? давайте
применим его к нашему параграфу с классом .text, там у нас как раз много текста и строк будет не мало:
*/

.text::first-line {
	color: green;
}

/*
Заходим в браузер и смотрим: наша первая строка в параграфе действительно изменилась! она стала.. больной!
Ой, в смысле... зеленой! сколько бы у нас не было строк в нашем параграфе, только первая строка будет такой,
ни вторая, ни третья, ни четвертая и даже пятая строка не станет зеленой - быть такого цвета суждено только
первой, и никому больше. Это легко проверить: откройте браузер и начните "сжимать" окошко, создав таким об-
разом сразу много строк - что нибудь изменилось? вы скажете "нет", и вы будете правы! лишь первая строка ос-
талась зеленой, другие не изменились.

Идем дальше, к следующему псевдоэлементу - ::first-letter
Псевдоэлемент first-letter позволяет задать стили для первой буквы, первого символа в абзаце, причем не важ-
но, сколько абзацев у нас есть на сайте - если у нас есть три абзаца с каким-то определенным классом, и мы
задали для них с помощью псевдоэлемента first-letter красный цвет (дабы у нас первые буквы в абзацах стали
красного цвета), то у каждого абзаца первая буква станет красного цвета. Это то мы и сделаем! но мы сделаем
не только это - мы еще и изменим размер первой буквы:
*/

.text::first-letter {
	font-size: 50px;
	color: red;
}

/*
Заходим в браузер, смотрим: а там у нас первую букву в абзаце от злости раздуло! да так раздуло, что она
больше основного текста в 2 раза! но не суть, главное что мы (вы, читатель, и я) поняли, что мы можем при
помощи псевдоэлемента просто так взять и создать что-то на подобие красной строки, БЕЗ использования чего
то лишнего в самом HTML. И осталось добавить, что к псевдоэлементам ::first-line и ::first-letter допустимо
использовать только те свойства, которые относятся либо к шрифту, изменению цвета текста и фона.

Идем дальше, разбирая псевдоэлементы как горячие пирожки... но стоп! у меня тут важнОя инфмАрмацЫя.
Те псевдоэлементы, которые мы изучим дальше, отличаются от предыдущих - они добавляют якобы целый тег, до
или после тега, к которому мы обращаемся. Но о чем идет речь и о чем вообще я? допустим, что я хочу стили-
зовать свой маркированный список. Мы с вами уже знаем, что это мощно сделать через свойство background, но
сегодня мы научимся делать это используя псевдоэлементы. Итак, встречайте! - ::before

Псевдоэлементыч ::before используется для отображения желаемого контента ДО содержимого элемента, к кото-
рому он применяется. Используется п-элемент ::before ТОЛЬКО со свойством «content:  '';», без него он не
будет отображаться в браузере. Свойство content может иметь пустое значение, то бишь просто пустые кавычки.
Однако оно как раз таки и содержит в себе тот самый контент, который мы хотим вывести ДО тега, к которому
мы применим этот псевдоэлемент. Контент вставляется внутрь кавычек, как вы уже, наверное, догадались.
Сразу для, так сказать, наглядности, я покажу вам следующий псевдоэлемент - ::after

Этот псевдоэлемент применяется для отображения желаемого контента ПОСЛЕ содержимого элемента, к которому
он применяется. Т.е этот псевдоэлемент делает то же самое что и ::before, только действует он наоборот -
если ::before использовался для отображения контента ДО нашего тега, то ::after используется для отобра-
жения контента ПОСЛЕ нашего тега. Так-то всё логично: before переводится как "до", after как "после" :)
Используется п-элемент ::after также как и ::before, только со свойством content. В принципе всё также
логично, так как оба этих п-элемента одинаковы и делают почти одну и ту же работу. А теперь будем применять
эти п-элементы на практике! а применять мы будем их на нашем списке. ::before мы применим для того, чтобы
до наших тегов li появлялись вот такие вот открывающие кавычки: «, а для чего мы будем использовать только
что изученный п-элемент ::after я думаю вы уже догадались :)
*/

.list li::before {
	content: "«";
}

.list li::after {
	content: "»";
}

/*
Готово! мы смогли ИЗМЕНИТЬ наш HTML файл НЕ ДОБАВЛЯЯ к нему ничего внутри, сделав это через CSS файл!
А теперь я покажу вам, читатель, дополнительные возможности, которые открываются нам благодаря этим
прекрасным псевдоэлементам...

Но, к сожалению, не сегодня, хехе. Увидимся чуть позже!)
*/