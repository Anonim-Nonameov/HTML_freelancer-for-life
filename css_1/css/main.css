/* Урок №1 - CSS синтаксис, обнуление стилей. */

/* 
CSS расшифровывается как "cascading style sheets", или "каскадные таблицы стилей".
Используются они для стилизации HTML элементов, и сейчас мы научимся с ними работать!
Первый урок будет посвящен синтаксису, а под конец мы получим готовый файл "обнуления стилей",
но об этом позже!
Итак, синтаксис у CSS простой - мы должны обратиться к HTML тегу или группе тегов в нашем html
файле, и описать для них нужные стили.
Сделать это можно раааазными способами - первый и самый простой - по имени тега.
Для этого пишем имя тега, ставим фигурные скобки, открываем их, и внутри пишем стили.
Но как написать стили в CSS? Мы ж ничего не знаем! а всё на самом деле очень просто.
Есть такое понятие как "селектор", свойство", и еще "значение". Рассмотрим их поближе.

Селектор - это спец. CSS правило, которое сообщает браузеру о том, к какому HTML тегу (или классу, о которых
мы еще поговорим) буду применяться CSS свойства, т.е это что-то вроде указателя в CSS на HTML тег или класс.
Свойство - это некая команда, применяемая к селектору. Она сообщаем браузеру о том, что надо сделать, и эта
команда применяется уже к селекторам. Т.е, это как команда "сядь!" собачке.
Значение - это уже конкретное значение команды. Т.е, это как если бы мы сказали собачке не просто "сядь!",
а сказали бы "сядь вон туда!", или "сядь на стул!".

А синтаксис максимально прост:
Прописываем название тега (это селектор), в фигурных скобках прописываем свойсвто и даем ему значение -

селектор {
	свойство: значение;
	свойство: значение;
	свойство: значение;
}

P.S - свойств может быть несколько, хоть 100!
P.S x2 - я буду попутно писать и HTML код, и CSS код.
Я не буду писать, на каком моменте написал такой-то HTML тег, или еще что-то - не до этого.
*/

div {

}

/*
Ну вот, мы обратились к тегу. Но мы не прописали к нему ниииикаких стилей! Это значит, что мы
написали бессмыслицу, которая ничего не делает.

Ну ладно, теперь попробуем обратиться ко всем тегам span на странице и укажем размер текста
20 пикселей и сделаем цвет текста красным.
*/

span {
	/* За размер текста отвечает свойство font-size */
	font-size: 20px;
	/* За цвет, как ни странно, отвечает свойство color */
	color: red; 

}
/*
Теперь, какой бы текст мы не обернули в span - у него будет размер текста 20 пикселей и цвет красный.
Это всё конечно хорошо, но как обратиться к конкретному тегу или группе тегов?
Самым популярным способом обращения из CSS считается селектор по классу. Что такое класс?
Класс - это атрибут, который может быть указан для любого HTML теге. Для этого мы пишем атрибут class, равно,
кавычки и пишем внутри кавычек имя класса. (Вроде урок по CSS - а объясняю тему из HTML... интересно.)
Класс в index.html я уже создал, называется он bigred, и теперь вместо того, чтобы обращаться прям ко всем
тегам span - можно обратиться только к тегам с классом bigred.
Для обращения к классу, ставим точку и прописываем имя класса.
Ну, попробуем! а тот селектор, который мы прописали выше - переопределим (о том, что такое
переопределение стилей - позже!):
*/

span {
	/* Устанавливаем "нормальный" размер шрифта */
	font-size: normal;
	/* Ставит черный цвет текста (он у любооооого браузера стоит по дефолту) */
	color: black; 
}

.bigred {
	font-size: 20px;
	color: red;
}

/*
ПЭ.СЭ: мне пришлось "переопределять" стили, потому что я не хочу комментировать код. Думаю, так будет лучше.

Отлично! Теперь, к какому бы тегу мы не прописали такой класс - его размер текста станет 20 пикселей и он станет
красным. Название = значение :)
Но есть один нюанс - у нас в HTML есть три span'а, и только у двух из них есть класс bigred - ко второму span'у
в первом параграфе они (стили класса) не применились! Всё дело в том, что у него НЕТУ класса bigred. Но если
мы его добавим - стили будут применены и всё получится!
*/

/* А теперь поговорим о некоторых нюансах синтаксиса CSS, зная которые можно избежать неприятных заминок во время верстки. */

/* Порядок записи параметров и селекторов */

/*
Если мы перезапишем параметр текста, и поставим ему значение не 20 а 30 - оно "перезапишется".
Т.е, прежнее значение будет проигнорировано и будет использовано значение ниже.
Всё потому, что интерпретатор (или как его там) читает CSS код сверху вниз - он читал,
читал - увидел надпись "font-size: 20px;" и применил её. Читал, читал - увидел надпись "font-size: 30px" и применил её:
*/

.bigred {
	/* Изначально, у font-size значение 20px */
	font-size: 20px;
	/* Теперь оно равно 30, а не 20! */
	font-size: 30px;
}

/*
Так можно делать сколько угодно раз.
Но то же самое касается и селекторов:
*/

.bigred {
	font-size: 35px;
}

/*
А если мы поставим его выше нашего "дефолтного" селектора, то эти стили (f.s: 35px) не применятся:
*/


.bigred {
	/* Сейчас размер текста равен 20 пикселям */
	font-size: 20px;
	/* Цвет - красный */
	color: red;
}

/*
P.S:
Не стал второй раз прописывать стили (.bigred {font-size: 35px;}), так как прошлая запись всё равно выше.
*/

/* Приоритетность записи (селекторов) */

/*
Также существует такая штука как приоритетность селектора.
Что это такое? это когда одна запись "важнее" (приоритетнее) другой, её важность в разы больше.
К примеру, селектор тега - имеет меньшую важность, чем селектор по классу.
Селектор по классу - имеет меньшую важность чем селектор по id (о id - позже), и т.д.
Подробнее можно прочитать об этом на различных сайтах или в документации.

Так вот - у нас есть класс bigred, но мы хотим чтобы у span'ов были свои стили, например, текст побольше
и цвет зеленый. А то у нас весь первый параграф будет размером с 20px и красным, из-за того что у него класс bigred!
Для этого, поставим ПРИОРИТЕТ на теги span с классом bigred.
Для этого, пишем имя тега и ставим точку, после точки имя класса:
*/

span.bigred {
	/* Переопределили размер шрифта */
	font-size: 30px;
	/* Перопределили цвет на зеленый */
	color: green;
}

/*
Всё! на самом деле, стили не убрались - мы просто сказали: "у тегов span с классом bigred,
размер текста должен быть 30 пикселей и цвет зеленый.", а если же мы создадим абзац с классом bigred -
то он будет красным (хотя этого даже не надо делать, у нас в index.html только 1 span в параграфе с классом bigred).

И еще: если мы поставим ниже этой, приоритетной записи что-то еще - оно ни применится:
*/

.bigred {
	font-size: 20px;
	color: red;
}

/*
Это не поможет, спаны всё равно будут зелеными.
И даже если мы поставим штук двадцать таких .bigred - не поможет.
*/

/* Вложенность тегов */

/*
!!!ВНЫМАНЫЕ, ВАЖНОЯ ИНФАРМАЦЫЯ!!!
Жека удалил всё лишнее из CSS файла, удалил классы bigred у span'ов, а я создал точно такой же div
с такими же двумя абзацами, но у первого абзаца класс не bigred, а bigred2 (т.к это второй div, да и
в таком случае не запутаешься).
Я думаю так будет лучше, будет меньше путаницы.

Итак, у нас есть div, внутри него два абзаца, а внутри них текст. Еще есть div с маааленьким абзацем внутри.
У первого абзаца класс bigred2, а у других тегов его нет!
Мы хотим, чтобы спаны стали зелеными, но без приоритетного селектора.
Как это сделать? - если так посмотреть, то мы можем увидеть что теги span лежат "внутри" тега p,
они вложены в него. Или даже так: у нас же есть тег div, внутри него p, внутри p - span'ы!
Т.е, схема такая:

div - {
	p - {
	span
	}
}

div "родитель" по отношению к p, p - дочерний элемент div, span - потомок div'a и дочерний элемент p.

Есть такой селектор, как селектор "вложеннего тега", или селектор "вложенности".
Синтаксис прост:

родительский.тег дочерний.тег {
	...
}

Причем читать такие "вложенные" селекторы лучше справа налево, пример:

div p {
	...
}

- "выбрать все элементы p внутри тега div".

Попробуем!
*/

.bigred2 span {
	color: green;
}

/*
Вот и всё! Но span'ы перекрасились только у первого абзаца, а у второго нет, т.к у него нету класса bigred2!
Но есть еще одна разнвидность вложения - обращение к первому уровню вложенных тегов.
Я уже рассказывал.. нет, писал о том, что такое родитель и что такое дочка, потомок... ну так вот:
если у родительского элемента (наш второй div) есть дочки (две p и 1 div), и внутри дочернего div'а есть
p - он считается потомком:

div (родитель) - {
	p (дочка) - {
		...
	}

	p (дочка) - {
		...
	}

	div (дочка) - {
		p (потомок) - {
			...
		}
	}
}

Ну так вот - "первым" уровнем вложенности считаются "дочки", а не потомки.
Мы можем сделать так, чтобы все p, находящиеся до другого div'а - стали голубыми, а p внутри
потомка - остался без всяких изменений.
Для этого есть спец. селектор - селектор "вложенности"!

P.S - Жека стёр все классы внутри своего div'а, и добавил класс block к самому div'у, а я же создал
новый div, точно такой же - но уже так, как сделал Жека.

Итак, у нас есть div, внутри него два p и div, внутри еще один p.
Задача - сделать так, чтобы весь текст в абзацах стал синим, но только не в дочернем диве.
Используем селектор вложенности. Синтаксис прост:

селектор > селектор {
	...
}

символ больше (>) означает "это-то и это-то применится только к дочерним элементам p!"

*/

span {
	color: inherit; /* Не обращайте внимания.. */
}

.block > p {
	color: blue;
}

/* Наследование элементов */

/*
Стили в CSS наследуется.
Т.е, если мы применяем стили ко всему род. элементу - их перенимают как дочерние элементы, так и потомки.

P.S  - создал еще один div, с параграфами и прочим.
*/

.block2 {
	font-size: 15px;
	color: blue;
	/* Свойство создает (solid) рамку вокруг элемента, толщиной 1 пиксель и черного цвета  */
	border: 1px solid black;
}

/*
Если сейчас зайти в браузер, можно заметить что размер текста и цвет поменялся.
Но рамка появилась только у род. элемента! а значит, что НЕ ВСЕ СВОЙСТВА НАСЛЕДУЮТСЯ.
*/

/* 
Всё, на этом урок окончен. Остальное в файлике "main_resetter.css" :)
*/