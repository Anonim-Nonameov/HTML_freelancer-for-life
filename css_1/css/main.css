/* Урок №1 - CSS синтаксис, обнуление стилей. */

/* 
CSS расшифровывается как "cascading style sheets", или "каскадные таблицы стилей".
Используются они для стилизации HTML элементов, и сейчас мы научимся с ними работать!
Первый урок будет посвящен синтаксису, а под конец мы получим готовый файл "обнуления стилей",
но об этом позже!
Итак, синтаксис у CSS простой - мы должны обратиться к HTML тегу или группе тегов в нашем html
файле, и описать для них нужные стили.
Сделать это можно раааазными способами - первый и самый простой - по имени тега.
Для этого пишем имя тега, ставим фигурные скобки, открываем их, и внутри пишем стили.
Но как написать стили в CSS? Мы ж ничего не знаем! а всё на самом деле очень просто.
Есть такое понятие как "селектор", свойство", и еще "значение". Рассмотрим их поближе.

Селектор - это спец. CSS правило, которое сообщает браузеру о том, к какому HTML тегу (или классу, о которых
мы еще поговорим) буду применяться CSS свойства, т.е это что-то вроде указателя в CSS на HTML тег или класс.
Свойство - это некая команда, применяемая к селектору. Она сообщаем браузеру о том, что надо сделать, и эта
команда применяется уже к селекторам. Т.е, это как команда "сядь!" собачке.
Значение - это уже конкретное значение команды. Т.е, это как если бы мы сказали собачке не просто "сядь!",
а сказали бы "сядь вон туда!", или "сядь на стул!".

А синтаксис максимально прост:
Прописываем название тега (это селектор), в фигурных скобках прописываем свойсвто и даем ему значение -

селектор {
	свойство: значение;
	свойство: значение;
	свойство: значение;
}

P.S - свойств может быть несколько, хоть 100!
P.S x2 - я буду попутно писать и HTML код, и CSS код.
Я не буду писать, на каком моменте написал такой-то HTML тег, или еще что-то - не до этого.
*/

div {

}

/*
Ну вот, мы обратились к тегу. Но мы не прописали к нему ниииикаких стилей! Это значит, что мы
написали бессмыслицу, которая ничего не делает.

Ну ладно, теперь попробуем обратиться ко всем тегам span на странице и укажем размер текста
20 пикселей и сделаем цвет текста красным.
*/

span {
	/* За размер текста отвечает свойство font-size */
	font-size: 20px;
	/* За цвет, как ни странно, отвечает свойство color */
	color: red; 

}
/*
Теперь, какой бы текст мы не обернули в span - у него будет размер текста 20 пикселей и цвет красный.
Это всё конечно хорошо, но как обратиться к конкретному тегу или группе тегов?
Самым популярным способом обращения из CSS считается селектор по классу. Что такое класс?
Класс - это атрибут, который может быть указан для любого HTML теге. Для этого мы пишем атрибут class, равно,
кавычки и пишем внутри кавычек имя класса. (Вроде урок по CSS - а объясняю тему из HTML... интересно.)
Класс в index.html я уже создал, называется он bigred, и теперь вместо того, чтобы обращаться прям ко всем
тегам span - можно обратиться только к тегам с классом bigred.
Для обращения к классу, ставим точку и прописываем имя класса.
Ну, попробуем! а тот селектор, который мы прописали выше - переопределим (о том, что такое
переопределение стилей - позже!):
*/

span {
	/* Устанавливаем "нормальный" размер шрифта */
	font-size: normal;
	/* Ставит черный цвет текста (он у любооооого браузера стоит по дефолту) */
	color: black; 
}

.bigred {
	font-size: 20px;
	color: red;
}

/*
ПЭ.СЭ: мне пришлось "переопределять" стили, потому что я не хочу комментировать код. Думаю, так будет лучше.

Отлично! Теперь, к какому бы тегу мы не прописали такой класс - его размер текста станет 20 пикселей и он станет
красным. Название = значение :)
Но есть один нюанс - у нас в HTML есть три span'а, и только у двух из них есть класс bigred - ко второму span'у
в первом параграфе они (стили класса) не применились! Всё дело в том, что у него НЕТУ класса bigred. Но если
мы его добавим - стили будут применены и всё получится!

А теперь поговорим о некоторых нюансах синтаксиса CSS, зная которые можно избежать неприятных заминок во время верстки.
*/

/*
Первый нюанс: порядок записи параметров и селекторов.
Если мы перезапишем параметр текста, и поставим ему значение не 20 а 30 - оно "перезапишется".
Т.е, прежнее значение будет проигнорировано и будет использовано значение ниже.
Всё потому, что интерпретатор (или как его там) читает CSS код сверху вниз - он читал,
читал - увидел надпись "font-size: 20px;" и применил её. Читал, читал - увидел надпись ""
*/

.bigred {
	/* Изначально, у font-size значение 20px */
	font-size: 20px;
	/* Теперь оно равно 30, а не 20! */
	font-size: 30px;
}