/* Урок №4 - CSS позиционирование. */

/*
Сегодня мы поговорим о позиционировании! позиционирование очень часто используется при верстке
современных макетов: это и различные выпадающие меню, и всплывающие окна (так называемые поп-апы),
это и "липкий" хедер который следует за нами при скролле, и всяческое нестандартное расположение
элементов на странице. Но пользоваться всеми этими крутыми возможностями нужно очень грамотно -
этому мы в скором времени и научимся! но сначала мы немного стилизуем наш index.html файлик, чтобы
он не казался таким "сероватым":
*/

body {
    padding: 30px;
    font-family: "Arial", Helvetica, sans-serif;
}

.block {
    border: 5px solid red;
    max-width: 800px;
    height: 800px;
    margin: 0px auto;
}

.block div {
    font-size: 18px;
    font-weight: 700px;
    text-align: center;
    line-height: 50px;
}

.block__1 {
    background-color: #ece89d;
}
.block__2 {
    color: #fff;
    background-color: #5e5373;
}
.block__3 {
    background-color: #18b5a4;
}

/*
Итак, начнем! первое, основное свойство позиционирования так и называется - position, а его
значение по умолчанию - static. Вообще, свойство position устанавливает ТИП позиционирования
элемента относительно других элементов, либо окна браузера. При значении по умолчанию (static),
все наши блоки будут выводиться как обычно, на них не будет дополнительных свойств. То есть,
position: static; указано уже заранее У ВСЕХ элементов на странице, а это значит, что дублировать
его не надо. А мы идем дальше!

Следующее значение свойства position - relative. Положение у элемента устанавливается ОТНОСИТЕЛЬНО
(запомните это слово) его начального положения. Что это значит? сейчас узнаем! - свойство position
со значением relative может использоваться дополнительно с новыми свойствами позиционирования,
которые становятся доступными после того, как мы сменили значение position'а с "по умол." на
любое другое (ну вот relative, например):

left, top, right, bottom


Используя свойство position со значением relative и доп. свойства позиционирования (left, top и т.д)
мы можем сдвигать наш элемент либо по гориз., либо по верт. ОТНОСИТЕЛЬНО его текущего положения.
Например, наш второй блок. Я хочу сдвинуть его слева на 50px и от верха на 60px:

*/

.block__2 {
    position: relative;
    left: 50px;
    top: 60px;
}

/*
Заходим в браузер, смотрим - сразу становится видно, что наш блок-2 сдвинулся относительно своего
изначального положения. Вместо себя он оставил пустое место, размером которое он занимал ДО того,
как его "заставили" подвинуться (:D). С остальными блоками ничего не произошло, как стояли на
своих местах так и стоят, никто и ничто им не мешало и не мешает. Правда, есть одно но - блок-3
был "накрыт" блоком-2 ввиду того, что последний сдвинулся. Бывает всякое в жизни, такое тоже :)
Еще следует отметить, что НЕЛЬЗЯ использовать свойства left и right одновременно, произойдет..
ну, диссонанс так сказать. А ведь логично - как сдвинуть элемент сразу и справа и слева? так
не правильно и делать так не стоит, абсолютно. А мы продолжаем. Вместе с position: relative; мы
можем использовать еще одно доп. свойство - z-index. Значениями z-index'а могут быть числа, но
по умолчанию оно равно нулю. И включается он, то есть начинает работать, только тогда, когда у
свойства position значение равно relative или любое другое значение, да - есть значения помимо
relative и мы их скоро изучим. z-index отвечает за контроль положения элементов, которые так
или иначе запозиционированны. Звучит сложно, но на деле проще простого! например, в данный момент
блок-2 перекрывает блок-3, но если я к блоку-3 применю position со значением relative а также
укажу z-index больший чем у блока-2 (а у него он по умолчанию, то есть 0), то случится кое что
очень даже интересное 
*/

.block__3 {
    position: relative;
    z-index: 2;
}

/*
Переходим в браузер и смотрим -  блок-3 "накрыл" блок-2, теперь он "главный" :)
Но что если мы изменим ход битвы, повысив z-index у второго блока?
*/

.block__2 {
    position: relative;
    z-index: 3;
}

/*
Опять заходим в браузер - всё вернулось на круги своя! блок-2 вновь стал "главнее" и перекрыл
блок-3. z-index тоже очень часто используется в верстке: вспоминаем те же поп-апы, выпадающие
меню и так далее, где надо чтобы меню выпало поверх каких-то блоков. Тут же и вступает в игру
это прекрасное свойство - z-index! а мы идем дальше - значение свойства position, absolute. 

Значение position'а absolute.. о да, очень трудное на понимание значение. Простыми словами,
блок, к которому применено абсолютное позиционирование, как будто "вырывается из потока",
грубо говоря "из HTML-кода". Он словно зависает в воздухе, он перестает иметь какие-то
физические размеры. Сейчас мы посмотрим на него в деле! его обязательно должно сопровождать
хоть какое-то свойство из свойств позиционирования: top, right, center или bottom, так как
разные браузер могут по разному реагировать на position со значением absolute. И так, например,
я хочу разместить свой блок-2 в верхнем левом углу:
*/

.block__2 {
    position: static; /* обнуляшки!! */
    z-index: 0; /* обнуляшки!! */
}

.block__3 {
    position: static; /* обнуляшки!! */
    z-index: 0; /* обнуляшки!! */
}

.block__2 {
    position: absolute;
    top: 0;
    left: 0;
}

/*
Зашли в браузер и смотрим: блок-2 улетел куда-то в угол, и мало того что он улетел: он был лишен
своей ширины, а мы знаем, что каждый блочный элемент имеет ширину в 100%. Он начал вести себя как
строчный элемент - его ширина стала равна ширине контента, и он прилип к левому верхнему углу нашего
браузера. Почему к левому верхнему? потому что мы указали top: 0 и left: 0, то есть сверху и слева
он будет сдвинут ни на сколько, поэтому то он и приклеился к углу. И кстати - можно увидеть, что
на том месте, где раньше стоял этот блок-2 стоит блок-3. А я уже говорил, что элемент, к которому
применено свойство position со значением absolute "ВЫРЫВАЕТСЯ" из HTML-кода, и поэтому блок-2 завис
где-то в воздухе, там где мы его запозиционировали дополнительными свойствами по вертикали а также
горизонтали. И то пространство, которое он занимал между блоками 1 и 3 исчезло, поэтому блок-3
как-бы занял его место. Блок-2 выдернулся, и всё, что было снизу, поднялось по коду.

Но в чём вообще прикол абсолютного позиционирования и как сделать так, чтобы можно было абсолютный
элемент позиционировать относительно другого элемента? - как раз абсолютным позиционированием
и строятся большинство элементов, это и выпадающие меню, и поп-апы и так далее. Но работает оно
хорошо и классно только тогда, когда мы можем его (абсолютный элемент) позиционировать относительно
его родителя. И для того, чтобы мы могли позиционировать наш блок-2 относительно родителя, а у нас
это элемент с классом .block (элемент с огромной красной рамкой, в котором как раз и хранятся наши
блоки), нужно добавить этому родительскому блоку свойство position со значением relative:
*/

.block {
    position: relative;
}

/*
Посмотрели в браузере на результат и увидели, что...

Что случилось? - узнаем позже!
*/