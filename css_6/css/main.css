/* Урок №4 - CSS псевдоклассы: hover и другие. */

/*
Сегодня мы поговорим о псевдоклассах! псевдоклассы это что-то вроде модификаторов для CSS селекторов (или аддоны,
дополнения в видеоиграх). Чаще всего они используются для примемения стилей в зависимости от состояния элемента,
или его положения в коде. Обо всех этих интересностях и вкусностях мы поговорим чуть позже, а пока что давайте
подготовим внешний вид страницы для работы с псевдоклассами, а то всё выглядит уж слишком "сыро"! - 
*/
body {
	padding: 30px;
}

.block {
	margin: 0 0 30px 0;
}

.block p {
	font-size: 18px;
	line-height: 24px;
	margin: 0 0 20px 0;
}

.link {
	color: red;
}

.textInput {
	width: 300px;
	height: 50px;
	font-size: 18px;
	border: 1px solid #666;
	padding: 0 15px;
	margin: 0 0 10px 0;
}

.textButton {
	display: block;
	width: 300px;
	height: 50px;
	font-size: 18px;
	color: #fff;
	text-transform: uppercase;
	background-color: #666;
	margin: 0 0 30px 0;
}

.list li {
	font-size: 18px;
	margin: 0 0 15px 0;
}

/*
Ну вот! а теперь мы поговорим о синтаксисе написания псевдоклассов.
Псевдоклассы записываются очень просто! во первых, нам нужно обратиться к селектору. К селектору тега, класса или
типа - не важно, главное чтобы был хоть какой-то селектор. После того как мы выбрали себе селектор, сразу (т.е без
пробелов) ставим двоеточие и пишем название псевдокласса, например hover. И только после того, как мы потавили нужный
нам псевдокласс, мы ставим фигурные скобки (это важно!). Возьмем в качестве примера тег с классом link:
*/

.link:hover {

}

/*
Отлично! но раз уж мы начали с записи псевдокласса hover, в первую очередь поговорим о псевдоклассах состояния.
Например, псевдокласс hover начинает действовать в тот момент, когда мы наводим мышкой на элемент, которому прописан
данный псевдокласс. Что значит "начинает действовать в тот момент, когда мы наводим мышкой"? а значит это то, что те
стили, которые мы прописываем внутри фигурных скобок, начинают работу тогда, когда мышка наводится на элемент.
Я думаю, что пора бы уже заиспользовать наш первый псевдокласс! Например, я хочу чтобы моя ссылка при наведении на
неё подчёркивалась - для этотго используем text-decoration с нужным значением:
*/

.link:hover {
	text-decoration: underline;
}

/*
Ну во! другое дело. Но изменения плохо видны, поэтому лучше изменить цвет при наведении. Пожалуй, будем менять цвет при
наведении, так будет намного наглядней:
*/

.link:hover {
	color: blue;
}

/*
А вот сейчас вообще круто! и цвет меняется, и подчеркивание появляется! изначально наша ссылка красного цвета, но при наводе
на неё она становится синей и у неё появляется подчеркивание (в общем, она становится обычной), а после того как мы убираем
курсор с ссылки она вновь становится красной (модная ссылка короче :D) :)
Но я хотел бы чтобы вы обратили внимание на то, что псевдокласс :hover часто применяется не только к ссылкам, но и к обычным
элементам, типа div'ов и span'ов. Например, мы можем задать стили при наведении для нашего div'а с классом block:
*/

.block:hover {
	background: blue;
}

/*
Отлично! наводим курсором на блок - цвет фона меняется на ярко-синий, убираем курсор - цвет фона у блока становится прозра-
чным, т.е - возвращается в привычное состояние. Этим я хотел показать, что наш только изученный псевдокласс применим прак-
тически ко всем элементам (опять же - не ко всем, но ко многим).

А тем временем мы идем к следующему псевдоклассу, очень полезному при украшивании ссылок - :visited.
Этот псевдокласс срабатывает на посещенные ссылки, то есть он отвечает за то, какие стили будут применяться к уже посещенной
ссылке. Например, цвет уже посещенной ссылки мы можем сделать не фиолетового цвета (какой она обычно становится), а, например,
зеленого. И да - этот псевдокласс применим только к ссылкам, так как "стили написанные внутри фиг. скобок будут применяться
лишь к тем ССЫЛКАМ, которые уже были посещены". Кстати, выше я написал, что мы можем изменить цвет посещенной ссылки на зеленый,
ибо посещенная ссылка по умолчанию фиолетового - так что же нам мешает сделать это?! давайте испробуем наш новый псевдокласс!
*/

.block:hover {
	background: transparent; /* обнуляшки!! */
}

.link:visited {
	color: green;
}

/*
Заходим в браузер (скучал я по этой фразе), смотрим: а там у нас ссылка красного цвета! болеет, видимо. Но да ладно, нажимаем
на ссылку и переходим по ней, затем возвращаемся обратно на страницу, и видим: ссылка стало зеленой!
Она так болеет, что её щас вырвет! :D и да, обратите внимание - при наведении на ссылку её цвет не меняется, появляется лишь
нижнее подчеркивание! почему так? - всё дело в том, данный отрывок кода: .link:visited {color: green;} - приоритетнее кода
выше, который меняет цвет ссылки на синий при наведении на неё. Чтобы исправить это, я сделаю вот так:
*/

.link:visited {
	color: green;
}

.link:hover {
	color: blue;
}

/*
A.S: я мог просто переписать код с :hover, но решил переписать и с :visited - для наглядности, так сказать.

Заходим в браузер (ооо даааа), и опять смотрим: ссылку всё также тошнит! бедняга. Наводим на неё курсор, и бац - она
стала синей! как мы видим, всё прекрасно работает и вновь.

Идем ко следующему псевдоклассу - :active!
Этот псевдокласс срабатывает ровно в тот момент, когда ссылка была кликнута. То есть - при нажатии. Да, ПРИ НАЖАТИИ.
Если честно, то он чем-то похож на :hover :D наверное тем, что :hover срабатывает при наведении, а он - при нажатии.
Ну что - испробуем его! но здесь есть один нюанс: чтобы увидеть хоть какие-то изменения, необходимо ЗАЖИМАТЬ ссылку.
То есть нажать левой кнопкой мыши на ссылку и никак не отпускать, только тогда будут видны изменения. Ну, теперь
точно можем пробовать новый псевдокласс! давайте изменим цвет при нажатии, на... пусть будет желтый!
*/

.link:active {
	color: yellow;
}

/*
Заходим в браузер (шикарная фраза!), всё также смотрим - ссылка ДО СИХ ПОР зеленая! ладненько, она еще поправится.
Нажимаем на неё, не отпуская (обнимаем? :D) - бац и она желтая! а при наведении она всё также меняет цвет на синий
и подчеркивается. И опять - :actve срабатывает в момент НАЖАТИЯ на элемент.

Следующий псевдоклассыч - :focus.
Срабатывает он при получении элементом фокуса, а что это такое - мы знаем, объяснять читателю что это - нет смысла,
но если же вы действительно не знаете что такое фокус ввода, то вам следует загуглить что это, это важно.
Вкратце - "фокус ввода" это аллюзия (аналогия) с человеческим фокусом, фокусировкой на каком-то элементе. При нажатии
клавиши tab, мы как-бы "фокусируемся" на следующем элементе, затем нам достаточно нажать enter для взаимодействия с
ним. Нажатие enter'a на элемент с фокусом равносильно клику мышки по нему, так что это очень важная и полезная вещь.
Кстати, фокусировку мы изучали на уроке про формы! вспомните - мы же ведь когда-то точно также нажимали на tab и
переключались по элементам! просто раньше понятие "фокус" нам не было знакомо, однако сейчас я знаю что это.
Чаще всего этот псевдокласс применяют для форм, всяческих полей ввода и т.п. Кстати, одно поле ввода у нас уже есть,
его класс - .textInput, как раз к нему мы и будем применять только что изученный псевдоклассыч! например, в момент
фокуса я хочу как-то выделить наше поле, потому что пользователям будет намного удобнее заполнять формы, так как они
будут видеть, на каком поле они находятся в данный момент. Можно использовать box-shadow, для добавления тени полю:
*/

.textInput:focus {
	box-shadow: 0 0 10px rgba(0, 0, 0, 0.8);
}

/*
Заходим в браузер, смотрим: а там у нас ничего не изменилось! но, стоит нам нажать на tab пару раз (или на само поле
ввода) - как тень сразу появляется! теперь пользователь будет видеть на каком элементе он находится, и в этом ему
поможет простая тень, которую мы добавили :) и еще одно важное замечание: как фокус с элемента теряется (для этого
достаточно кликнуть куда нибудь на странице или нажать на tab еще раз), стили применямые к элементу с таким 
псевдоклассом НЕ работают. Почему? а потому что псевдокласс добавляет стили лишь к тем элементам, у которых в данный
момент есть псевдокласс! всё логично.

Хорошо, а теперь давайте поговорим о псевдоклассах, которые помогают обратиться и задать стили конкретным элементам
в коде. Взгляните на наш список на странице и представьте, что вам дана задача:  текст первого элемента окрасить в
желтый, цвет текста последнего элемента в зеленый, а цвет текста третьего элемента окрасить в серый, допустим.
Вы скажете: "добавлю классы и применю к этим элементам соответствующие стили, чего сложного то? :D" - и вы будете
абсолютно правы! я, ровно также как и вы, могу добавить к элементам классы и задать каждому из них нужный цвет и,
при необходимости, еще какие-то стили. Однако, при помощи определенных псевдоклассов мы можем стилизовать эти
элементы без добавления лишних HTML атрибутов, освобождая какое-то место в index.html файле (хоть и малое).

Итак, для того чтобы обратиться к первому элементу списка в блоке (а блоком у нас является сам тег списка, ul),
мы обращаемся к li внутри .list и прописываем двоеточие, а после них ставим псевдокласс first-child:
*/

.list li:first-child {

}

/*
Как-то так. Этот псевдокласс применяет стили к первому элементу в каком нибудь блоке, но чаще всего его используют
именно для элементов списка (как ни странно). Код выше ничего не будет делать, это просто демонстрация псевдокласса.
Но мы же с вами хотели поменять цвет первого элемента на желтый!! чего же мы ждём? давайте сделаем это! -
*/

.list li:first-child {
	color: yellow;
}

/*
Отлично! цвет первого элемента в списке успешно изменился.
Не трудно догадаться, каким будет следующий псевдокласс - им будет всеми известный (и не очень) :last-child!
Этот псевдокласс делает то же самое, что и :first-child, но он применяет стили к ПОСЛЕДНЕМУ элементу, а не к первому.
Мы хотели изменить цвет последнего элемента на зеленый, поэтому сделаем это не медля! -
*/

.list li:last-child {
	color: green;
}

/*
Щикарна! цвет последнего элемента в списке также успешно изменился.
А как обратиться к конкретному элементу в списке? какой для этого используется псевдоклассыч? - а для этого мы
используем псевдокласс nth-child. Его синтаксис немного отличается от других, в основном в том, что после
названия псевдокласса идут круглые скобки, в которых мы указываем номер элемента по порядку. Если в списке
пять элементов, и мы хотим обратиться к четвертому элементу и поменять ему стили, то записывуем в скобки
цифру 4. Всё просто! давайте теперь применим его. Например.... например подчеркнем его!
*/

.list li:nth-child(4) {
	text-decoration: underline;
}

/*
Заходим в браузер и смотрим: подчеркивание у четвертого элемента действительно появилось!
А теперь я покажу вам ВСЕ способности nth-child, всю его мощь, так сказать. Начнем с того, что нам понадобится
обнулить стили у first-child и last-child соответственно, так будет более нагляднее что-ли:
*/

.list li:first-child,
.list li:last-child {
	color: black; /* обнуляшки!! */
}

/*
А теперь о том, о чем я хотел написать. У nth-child есть и специальные значения, помимо простых числовых.
Первое из них - odd. В переводе с английского odd означает "нечетный", и действительно: nth-child со значением
odd ВЫБИРАЕТ ВСЕ НЕЧЕТНЫЕ ЭЛЕМЕНТЫ В БЛОКЕ, т.е nth-child(odd) будет обращаться к первому, третьему, пятому и
другим нечетным элементам в блоке. Давайте попкратикуемся и изменим регистр у нечетных элементов в блоке на
верхний, делается это через text-transform со значением uppercase:
*/

/*
Обратите внимание, что нам не придется обращаться ко всем нечетным элементам в блоке вручную! всего лишь 1
значение способно сэкономить столько места!
*/

.list li:nth-child(odd) {
	text-transform: uppercase;
}

/*
Заходим в браузер, обновляем страницу и смотрим: первый, третий и пятый элементы (то есть всё нечетные элементы)
изменили свой регистр на верхний. Естественно, если бы в блоке было больше нечетных элементов, то и они бы
тоже переняли к себе стили, заданные выше. Крайне удобное значение, его очень часто используют верстальщики при
верстке сайтов (по крайней мере, я видел 2 сайта с использованием этого псевдокласса с таким значением, а это
уже много). А мы тем временем идем к следующему значению псевдоклассу nth-child - противоположность odd'у, even.

Слово even с английского переводится как "четный", и действительно - псевдокласс nth-child с таким значением
выбирает ВСЕ ЧЕТНЫЕ ЭЛЕМЕНТЫ В БЛОКЕ, т.е nth-child(even) будет обращаться ко второму, четвертому, шестому и
другим четным элементым в блоке. Давайте применим это значение к нашему псевдоклассу, изменив регистр у li:
*/

.list li:nth-child(odd) {
	text-transform: none; /* обнуляшки!! */
}

.list li:nth-child(even) {
	text-transform: uppercase;
}

/*
Отлично, стили успешно применились к элементам и отлично работают. Но есть еще одна важная деталь, которую
я должен показать вам (и, возможно, самому себе (в будущем)). Покажу я на примере наших параграфов в диве
с классом block, у нас их всего 3 штуки. Мы можем точно также обращаться к тому или иному элементу:
*/

.block p:last-child {
	text-transform: uppercase;
}

/*
Заходим в браузер и смотрим: а у нас там последний параграф свой регистр изменил!
Как вы уже поняли, эти псевдоклассы легко применяются не только к элементам списка, всё срабатывает.
Но если мы добавим после параграфа еще какой-то тег, например div (а я уже добавил) - стили перестанут
работать! и это печально, но вполне себе объяснимо. Всё дело в том, что теперь (когда-то) последний тег p
не является последним! сейчас последним является тег div с классом block__text, поэтому наше обращение к
последнему параграфу в диве с классом .block, а именно через псевдокласс :last-child - не срабатывает.
Опять же - теперь p НЕ является ПОСЛЕДНИМ элементом, он теперь предпоследний. И да, такая же проблема и у
псевдокласса :first-child - вот, сами посмотрите!
*/

.block p:last-child {
	text-transform: none; /* обнуляшки!! */
}

.block p:first-child {
	text-transform: uppercase;
}

/*
Опять заходим в браузер и смотрим: всё работает, всё отлично.
Но в HTML коде я оставил комментарии с дивами, их там два: в начале дива и в конце. Возьмите и удалите
комментарий с первого дива в .block, а затем перейдите в браузер и посмотрите, что произошло.
Но я не хочу заставлять вас делать двойную работу (ой какой добрый) и таки напишу, что же произойдет:
а произойдет то же самое что и с :last-child - не сработают стили. Всё потому, что теперь первыый (когда-то)
p уже не первый - он теперь второй тег в диве с классом .block! причем та же самая ситуация и с псевдоклассом
nth-child: если задать первому элементу p верхний регистр, то ничего не сработает, так как в диве с классом
.block нету первого параграфа - первым элеметном является другой див:
*/

.block p:first-child {
	text-transform: none; /* обнуляшки! */
}

.block p:nth-child(1) {
	text-transform: uppercase;
}

/*
Смотрим: ничего не сработало (я раскомментировал первый див). Всё по той же причине - тег p не первый элемент,
он ВТОРОЙ. Если мы применим этот псевдокласс со значением 2 - стили заработают как часики:
*/

.block p:nth-child(1) {
	text-transform: none;
}

.block p:nth-child(2) {
	text-transform: uppercase;
}

/*
Заходим в браузер и смотрим: всё работает как надо! а всё потому, что наш элемент p ВТОРОЙ в блоке, не первый.

А на этом всё! задание в папке "Задания", в файле index.html
*/